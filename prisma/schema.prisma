generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Block {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @default(now()) @db.Timestamp(3)
}

model Comment {
  id              Int       @id @default(autoincrement())
  created_at      DateTime  @default(now()) @db.Timestamp(3)
  updated_at      DateTime  @default(now()) @db.Timestamp(3)
  content         String    @db.VarChar
  userId          Int?
  postId          Int?
  parentCommentId Int?
  parentComment   Comment?  @relation("parentComment", fields: [parentCommentId], references: [id])
  post            Posts?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            User?     @relation("comments", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userLike        UserLike?
  postLike        PostLike?
  parentComments  Comment[] @relation("parentComment")
}

model FcmNotificationTokens {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @default(now()) @db.Timestamp(3)
  fcmToken   String   @db.VarChar
  userId     Int?     @unique
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Follower {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @default(now()) @db.Timestamp(3)
  userId     Int?
  actorId    Int?
  user       User?    @relation("userFollowings", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  actor      User?    @relation("userFollowers", fields: [actorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model MessageRequest {
  id            Int      @id @default(autoincrement())
  created_at    DateTime @default(now()) @db.Timestamp(3)
  updated_at    DateTime @default(now()) @db.Timestamp(3)
  request       Boolean  @default(true)
  requestFromId Int?
  requestToId   Int?
  requestFrom   User?    @relation("requestFrom", fields: [requestFromId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  requestTo     User?    @relation("requestTo", fields: [requestToId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Messages {
  id                 Int        @id @default(autoincrement())
  created_at         DateTime   @default(now()) @db.Timestamp(3)
  updated_at         DateTime   @default(now()) @db.Timestamp(3)
  message            String     @db.VarChar
  seen               Boolean    @default(false)
  roomId             Int
  senderId           Int
  receiverId         Int
  repliedToMessageId Int?
  receiver           User?      @relation("receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  room               Room?      @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender             User?      @relation("sendedMessages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  repliedToMessage   Messages?  @relation("repliedToMessage", fields: [repliedToMessageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  repliedToMessages  Messages[] @relation("repliedToMessage")
}

model Notification {
  id               Int      @id @default(autoincrement())
  created_at       DateTime @default(now()) @db.Timestamp(3)
  updated_at       DateTime @default(now()) @db.Timestamp(3)
  notificationType Int
  readed           Boolean  @default(false)
  userId           Int?
  actorId          Int?
  entityId         Int
  entityType       String   @db.VarChar
  user             User?    @relation("notifications", fields: [actorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  actor            User?    @relation("ownedNotifications", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model PostLike {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamp(3)
  updated_at DateTime  @default(now()) @db.Timestamp(3)
  likeCount  Int       @default(0) @db.SmallInt
  userLike   UserLike?
  postId     Int?      @unique
  commentId  Int?      @unique
  post       Posts?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Posts {
  id         Int       @id @default(autoincrement())
  content    String    @db.VarChar
  type       Int
  slug       String?   @unique @db.VarChar
  created_at DateTime  @default(now()) @db.Timestamp(3)
  updated_at DateTime  @default(now()) @db.Timestamp(3)
  userId     Int
  additional String?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comment    Comment[]
  category   Category? @relation(fields: [categoryId], references: [id])
  userLike   UserLike?
  postLike   PostLike?
  categoryId Int?
}

model Category {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamp(3)
  updated_at  DateTime @default(now()) @db.Timestamp(3)
  name        String
  description String?
  image       String?
  Posts       Posts[]
}

model Room {
  id         Int        @id @default(autoincrement())
  created_at DateTime   @default(now()) @db.Timestamp(3)
  updated_at DateTime   @default(now()) @db.Timestamp(3)
  roomAdress String     @unique @db.VarChar
  expireDate DateTime   @default(now()) @db.Timestamp(3)
  Messages   Messages[]
}

model SpotifyCurrentlyListening {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @default(now()) @db.Timestamp(3)
  songName   String   @db.VarChar
  artistName String   @db.VarChar
  userId     Int?     @unique
  image      String   @db.VarChar
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Star {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @default(now()) @db.Timestamp(3)
  starCount  Int      @default(0) @db.SmallInt
  userId     Int?     @unique
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                     Int                        @id @default(autoincrement())
  username               String                     @unique @db.VarChar
  email                  String                     @unique @db.VarChar
  gender                 Int?
  bio                    String?                    @db.VarChar
  password               String                     @db.VarChar
  isEmailConfirmed       Boolean                    @default(false)
  emailConfirmationCode  Int?
  created_at             DateTime                   @default(now()) @db.Timestamp(3)
  updated_at             DateTime                   @default(now()) @db.Timestamp(3)
  forgotPasswordCode     Int?
  birthday               DateTime?                  @db.Timestamp(3)
  blockIncomingCalls     Boolean?                   @default(false)
  avatar                 String?                    @default("avatar1") @db.VarChar
  refreshToken           String?                    @db.VarChar
  comments               Comment[]                  @relation("comments")
  FcmNotificationTokens  FcmNotificationTokens?
  followers              Follower[]                 @relation("userFollowers")
  followings             Follower[]                 @relation("userFollowings")
  sendedMessageRequests  MessageRequest[]           @relation("requestFrom")
  messageRequests        MessageRequest[]           @relation("requestTo")
  messages               Messages[]                 @relation("receivedMessages")
  sendedMessages         Messages[]                 @relation("sendedMessages")
  notifications          Notification[]             @relation("notifications")
  ownedNotifications     Notification[]             @relation("ownedNotifications")
  posts                  Posts[]
  currentlyListeningSong SpotifyCurrentlyListening?
  star                   Star?
  userLike               UserLike[]
  UserRating             UserRating[]
  NotificationSettings   NotificationSettings?
}

model UserLike {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamp(3)
  updated_at DateTime  @default(now()) @db.Timestamp(3)
  liked      Boolean
  userId     Int?
  postId     Int?      @unique
  commentId  Int?      @unique
  postLikeId Int?      @unique
  comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post       Posts?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  postLike   PostLike? @relation(fields: [postLikeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model UserRating {
  id     Int   @id @default(autoincrement())
  rate   Int
  userId Int
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model NotificationSettings {
  id             Int      @id @default(autoincrement())
  disableAll     Boolean? @default(false)
  follower       Boolean? @default(false)
  messageRequest Boolean? @default(false)
  comments       Boolean? @default(false)
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id])
  created_at     DateTime @default(now()) @db.Timestamp(3)
  updated_at     DateTime @default(now()) @db.Timestamp(3)
}
